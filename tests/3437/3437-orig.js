function checkSyntax ( str ) { try { eval ( str ) ; 
String ( false ) ; 
} catch ( e ) { String ( e instanceof SyntaxError ) ; 
} 
} 
function assertArrayEqual ( actual , expected ) { String ( actual .length === expected .length ) ; 
for ( var i = 0 ; i < actual .length ; i ++ ) { String ( actual [ i ] === expected [ i ] ) ; 
} 

} 
function mustThrow ( str ) { try { eval ( str ) ; 
String ( false ) ; 
} catch ( e ) { String ( e instanceof TypeError ) ; 
} 
} 
checkSyntax ( "var [a]" ) ; 
checkSyntax ( "var [a, o.a]" ) ; 
checkSyntax ( "var [a, ...b,]" ) ; 
checkSyntax ( "var [a, ...b = 4]" ) ; 
checkSyntax ( "var [a, ...[b] = 4]" ) ; 
checkSyntax ( "var [let]" ) ; 
checkSyntax ( "var [get = []" ) ; 
checkSyntax ( "var [get : 5]" ) ; 
checkSyntax ( "var [[a = {},]" ) ; 
checkSyntax ( "let [a,a] = []" ) ; 
checkSyntax ( "let [a, ...a] = []" ) ; 
checkSyntax ( "const [a,a] = []" ) ; 
checkSyntax ( "const [a, ...a] = []" ) ; 
checkSyntax ( "[new Object()] = []" ) ; 
checkSyntax ( "[Object()] = []" ) ; 
checkSyntax ( "[(a, b, d, c)] = []" ) ; 
checkSyntax ( "[super] = []" ) ; 
checkSyntax ( "[this] = []" ) ; 
checkSyntax ( "[()] = []" ) ; 
checkSyntax ( "try { let [$] = $;" ) ; 
checkSyntax ( "let a, [ b.c ] = [6];" ) ; 
checkSyntax ( "let [(a)] = [1]" ) ; 
mustThrow ( "var [a] = 4" ) ; 
mustThrow ( "var [a] = 5" ) ; 
mustThrow ( "var [a] = {}" ) ; 
mustThrow ( "var [a] = { get [Symbol.iterator] () { throw new TypeError } }" ) ; 
mustThrow ( "var [a] = { [Symbol.iterator] () {} }" ) ; 
mustThrow ( "var [a] = { [Symbol.iterator] () { return {} } }" ) ; 
mustThrow ( "var [a] = { [Symbol.iterator] () { return { next: 5 } } }" ) ; 
mustThrow ( "var [a] = { [Symbol.iterator] () { return { next: 5 } } }" ) ; 
mustThrow ( "var [a] = { [Symbol.iterator] () { return { get next() { throw new TypeError } } } }" ) ; 
mustThrow ( "var [a] = { [Symbol.iterator] () { return { next () { } } } }" ) ; 
mustThrow ( "var [a] = { [Symbol.iterator] () { return { next () { } } } }" ) ; 
mustThrow ( "var [a] = { [Symbol.iterator] () { return { next () { return { get value () { throw new TypeError }}}}}}" ) ; 
mustThrow ( "var [a] = { [Symbol.iterator] () { return { next () { return { get done () { throw new TypeError }}}}}}" ) ; 
( function ( ) { var foo = [ "one" , "two" , "three" ] ; 
var [ red , yellow , green ] = foo ; 
String ( red === "one" ) ; 
String ( yellow === "two" ) ; 
String ( green === "three" ) ; 
} ) ( ) ; 
( function ( ) { var a , b ; 
[ a , b ] = [ 1 , 2 ] ; 
String ( a === 1 ) ; 
String ( b === 2 ) ; 
} ) ( ) ; 
( function ( ) { var a , b ; 
[ a = 5 , b = 7 ] = [ 1 ] ; 
String ( a === 1 ) ; 
String ( b === 7 ) ; 
} ) ( ) ; 
( function ( ) { var a = 1 ; 
var b = 3 ; 
[ a , b ] = [ b , a ] ; 
String ( a === 3 ) ; 
String ( b === 1 ) ; 
var arr = [ 1 , 2 , 3 ] ; 
[ arr [ 2 ] , arr [ 1 ] ] = [ arr [ 1 ] , arr [ 2 ] ] ; 
assertArrayEqual ( arr , [ 1 , 3 , 2 ] ) ; 
} ) ( ) ; 
( function ( ) { function f ( ) { return [ 1 , 2 ] ; 
} 
var a , b ; 
[ a , b ] = f ( ) ; 
String ( a === 1 ) ; 
String ( b === 2 ) ; 
} ) ( ) ; 
( function ( ) { function f ( ) { return [ 1 , 2 , 3 ] ; 
} 
var a , b ; 
[ a , , b ] = f ( ) ; 
String ( a === 1 ) ; 
String ( b === 3 ) ; 
} ) ( ) ; 
( function ( ) { var [ a , ... b ] = [ 1 , 2 , 3 ] ; 
String ( a === 1 ) ; 
assertArrayEqual ( b , [ 2 , 3 ] ) ; 
} ) ( ) ; 
( function ( ) { function parseProtocol ( url ) { var parsedURL = /^(\w+)\:\/\/([^\/]+)\/(.*)$/ .exec ( url ) ; 
if ( ! parsedURL ) { return false ; 
} 

var [ , protocol , fullhost , fullpath ] = parsedURL ; 
return protocol ; 
} 
String ( parseProtocol ( "https://developer.mozilla.org/en-US/Web/JavaScript" ) === "https" ) ; 
} ) ( ) ; 
( function ( ) { let [ a , [ b , [ c = 4 , d = 5 ] ] , [ e ] = [ 6 ] ] = [ 1 , [ 2 , [ 3 , undefined ] ] ] ; 
String ( a === 1 ) ; 
String ( b === 2 ) ; 
String ( c === 3 ) ; 
String ( d === 5 ) ; 
String ( e === 6 ) ; 
} ) ( ) ; 
( function ( ) { var o = { } ; 
[ a , b , c , o .a = 4 , o .b , o .c = 3 ] = [ "1" , "2" , "3" , undefined , "8" , "6" ] ; 
String ( a === "1" ) ; 
String ( b === "2" ) ; 
String ( c === "3" ) ; 
String ( o .a === 4 ) ; 
String ( o .b === "8" ) ; 
String ( o .c === "6" ) ; 
} ) ( ) ; 
( function ( ) { var o = { } ; 
[ ... RegExp .prototype .compile ] = [ "1" , "2" , "3" ] ; 
assertArrayEqual ( o .a , [ "1" , "2" , "3" ] ) ; 
} ) ( ) ; 
( function ( ) { [ ... [ a , b , c ] ] = [ "1" , "2" , "3" ] ; 
String ( a === "1" ) ; 
String ( b === "2" ) ; 
String ( c === "3" ) ; 
} ) ( ) ; 
( function ( ) { [ { f : a , g : b } , , , ... [ c , d , e ] ] = [ { f : "1" , g : "2" } , 3 , 4 , 5 , 6 , 7 ] ; 
String ( a === "1" ) ; 
String ( b === "2" ) ; 
String ( c === 5 ) ; 
String ( d === 6 ) ; 
String ( e === 7 ) ; 
} ) ( ) ; 
( function ( ) { var [ a ] = [ 1 ] , [ b ] = [ 2 ] ; 
String ( a === 1 ) ; 
String ( b === 2 ) ; 
} ) ( ) ; 
( function ( ) { const [ a ] = [ 1 ] ; 
eval ( ) ; 
String ( a === 1 ) ; 
} ) ( ) ; 
( function ( ) { let [ a ] = [ 1 ] ; 
eval ( ) ; 
String ( a === 1 ) ; 
} ) ( ) ; 
( function ( ) { var a = 6 ; 
[ ( ( a ) ) ] = [ 7 ] ; 
String ( a === 7 ) ; 
} ) ( ) ; 
function id_0 ( arr , methods ) { methods = methods || { } ; 
if ( typeof Symbol !== 'function' || ! Symbol .iterator ) { return { } ; 
} 

arr .length ++ ; 
var iterator = { next : function ( ) { return { value : arr .shift ( ) , done : arr .length <= 0 } ; 
} , 'return' : methods [ 'return' ] , 'throw' : methods [ 'throw' ] } ; 
var iterable = { } ; 
iterable [ Symbol .iterator ] = function ( ) { return iterator ; 
} ; 
return iterable ; 
} 
; 
( function ( ) { var closed = false ; 
var iter = id_1 ( [ 1 , 2 , 3 ] , { 'return' : function ( ) { closed = true ; 
return { } ; 
} } ) ; 
var [ a , b ] = iter ; 
String ( closed === true ) ; 
String ( a === 1 ) ; 
String ( b === 2 ) ; 
} ) ( ) ; 
mustThrow ( "var iter = __createIterableObject([], " + "{ get 'return'() { throw new TypeError() }});" + "var [a] = iter" ) ; 
mustThrow ( "var iter = __createIterableObject([], " + "{ 'return': 5 });" + "var [a] = iter" ) ; 
mustThrow ( "var iter = __createIterableObject([], " + "{ 'return': function() { return 5; }});" + "var [a] = iter" ) ; 
mustThrow ( "try { throw 5 } catch (e) {" + "var iter = __createIterableObject([], " + "{ get 'return'() { throw new TypeError() }});" + "var [a] = iter }" ) ; 
mustThrow ( "try { throw 5 } catch (e) {" + "var iter = __createIterableObject([], " + "{ 'return': 5 });" + "var [a] = iter }" ) ; 
mustThrow ( "try { throw 5 } catch (e) {" + "var iter = __createIterableObject([], " + "{ 'return': function() { return 5; }});" + "var [a] = iter }" ) ; 
